<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vite</title>
      <link href="/blog/2021/11/28/vite/"/>
      <url>/blog/2021/11/28/vite/</url>
      
        <content type="html"><![CDATA[<h2 id="vite及旧项目改造思路"><a href="#vite及旧项目改造思路" class="headerlink" title="vite及旧项目改造思路"></a>vite及旧项目改造思路</h2><h3 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h3><p>本文主要围绕vite诞生背景、初衷、原理、为何使用、如何使用、如何在旧项目中使用，这几个问题来说，以达到对vite有一个全面的认识，并运用自如。</p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>vite诞生在2020年，这一年，<a href="https://zhuanlan.zhihu.com/p/367249029">ECMAScript</a>发布了他的第十一个版本，原生模块化也已经诞生了5个年头。除ie浏览器之外，所有主流浏览器都已支持了该特性。市面上各种<a href="https://blog.csdn.net/qq_36538012/article/details/110425213">构建工具</a>百花齐放，webpack也迎来了它的巅峰时刻。</p><p>就是在这样一个背景之下，vite横空杀出，并迅速获取了相当高的热度。我认为原因有一下几点：</p><ul><li>归功于vue的大火，使得尤大自带热度。</li><li>诟病与webpack在大型项目本地开发中速度低下，使得市场急需一种解决方案。</li></ul><h3 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a>初衷</h3><p>webpack等构建工具是时代的产物，它使前端开发者们更加高效，和有条理的管理我们的项目，并且优雅的使用各种框架，不用过多考虑新语法的兼容性，通过插件系统高效的处理一系列同等问题等。对于高速发展的前端来说，具有举足轻重的地位。</p><p>然而面对大型应用，需要处理的文件和代码量很多，这时传统的构建方式开始出现弊端，当我们启动一个前端项目时，需要等待数分钟或者数十分钟来等待，即使使用热更新也需要数秒。这对于一个追求极致效率的前端开发者来说是不能忍受的。因此，vite诞生了，vite旨在利用生态系统中的新进展来解决上述问题：即ESM</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>这里有一个问题，为什么vite比传统构建方式快？</p><p>这里使用webpack和vite进行对比。</p><p>首先对于<a href="https://zhuanlan.zhihu.com/p/363928061">webpack的原理</a>进行简单的了解。</p><p>webpack目前已经出到了5.0版本。具有模块打包、代码分割、按需加载、HMR、Tree-shaking、文件监听、sourcemap、Module Federation、devServer、DLL、多进程等等功能，非常复杂，也非常强大（这也是为什么会有webpack工程师的原因，并且短时间内不能被取代）。</p><p>了解webpack可以从三个方面入手</p><p>1、构建的核心流程</p><p>2、loader的作用</p><p>3、plugin架构已经常用套路</p><p><img src="/blog/2021/11/28/vite/tree.png" alt="一张图"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 构建工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/blog/2021/11/28/hello-world/"/>
      <url>/blog/2021/11/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构和算法</title>
      <link href="/blog/2020/11/27/data-structure-and-algorithm/"/>
      <url>/blog/2020/11/27/data-structure-and-algorithm/</url>
      
        <content type="html"><![CDATA[<h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><h3 id="什么是数据结构？"><a href="#什么是数据结构？" class="headerlink" title="什么是数据结构？"></a>什么是数据结构？</h3><p>1、数据结构是是一项非常重要的技术，因为好的程序设计=好的数据结构+好的算法。因此掌握数据结构显得非常重要。</p><p>2、简单的来说数据结构就是关系，就是数据元素相互之间存在的一种或多种特定关系的集合。</p><p>3、传统上，我们把数据结构分为逻辑结构和物理结构。</p><p>（1）逻辑结构：是指数据对象中数据元素之间的相互关系。</p><p>（2）物理结构：是指数据的逻辑结构在计算机中的存储形式。</p><p>4、计算机中有4大逻辑结构：</p><p>（1）集合结构：（集合内的元素除具有某些相似特征外，无任何其他关系）</p><button style="border: 1px solid #666; width: 100px; height: 100px; border-radius: 50%; text-align: center; line-height: 8px;display: block;margin-left: 40px">.........</br>.........</br>.........</br>.........</br></button><p>（2）线性结构：（线性结构中的元素具有一对一的关系）</p><div style="margin-left: 40px">  <kbd>元素1</kbd>----><kbd>元素2</kbd>----><kbd>元素3</kbd>----><kbd>元素4</kbd></div><p>（3）树形结构：（树形结构中的元素具有一对多的关系）</p><pre class="mermaid">graph TD  B((节点1))  B-->D[节点2]  B-->E[节点3]  B-->F[节点4]</pre><p>（4）图形结构：（图形结构中的元素具有多对多的关系）</p><pre class="mermaid">graph TD  A((节点1))  A-->B[节点2]  A-->C[节点2]  B-->C[节点3]  B-->D[节点3]  C-->D[节点4]  D-->A[节点1]</pre><p>5、说完逻辑结构，我们再来说说数据的物理结构。</p><p>（1）物理结构的定义，实际上就是研究如何把数据元素存储到计算机的存储器中。</p><p>存储器主要是针对内存而言的，像硬盘、软盘、光盘等外部存储器的数据组织通常用文件结构来描述。</p><p>（2）数据元素的存储结构形式有两种：顺序存储和链式存储。</p><ul><li>顺序存储结构：是把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的。</li><li>例如我们编程语言的数组结构就是这样滴。</li></ul><p>在日常生活中，排队跟顺序存储结构十分相似。但是排队有一个很大的弊病，就是你一旦离开队伍，在想回到原来的位置就变得很困难。这个时候就要提一手链式存储结构</p><p>链式存储结构类型现在的叫号系统，你只需取一张号，然后就可以忙别的了。就是你随便在什么位置，通过号码可以关联到你。这样就很灵活。</p><h3 id="浅谈算法"><a href="#浅谈算法" class="headerlink" title="浅谈算法"></a>浅谈算法</h3><p>1、数据结构和算法是很难分开的，如果只谈数据结构，会显的很没用，同样撇开数据结构只谈算法，又会觉得算法晦涩难懂。但是把二者结合你会发现，编码原来非常amazing</p><p>2、算法初体验，如何累加1-100</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let num &#x3D; 0;</span><br><span class="line">for (let a &#x3D; 1; a &lt;&#x3D; 100; a++&gt;) &#123;</span><br><span class="line">  num +&#x3D; a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const num &#x3D; (1 + 100) * 100 &#x2F; 2</span><br></pre></td></tr></table></figure><p>3、是不是发现第二种方法比第一种效率高很多，这就是算法的魅力。</p><p>4、从概念上来讲，算法具有五大特征：输入、输出、有穷性、确定性和可行性。</p><p>（1）输入：</p><ul><li>算法具有零个或多个输入。</li><li>尽管对于绝大多数算法来说，输入参数都是必要的。但是有些时候，像打印“123456”，就不需要啥参数啦。</li></ul><p>（2）输出：</p><ul><li>算法至少有一个或多个输出。</li><li>算法是一定要输出的，不需要它输出，那你要这个算法来干啥？输出的形式可以是打印形式输出，也可以是返回一个值或多个值等。</li></ul><p>（3）有穷性：</p><ul><li>指算法在执行有限的步骤之后，自动结束而不会出现无限循环，并且每一个步骤在可接受的时间内完成。一个永远都不会结束的算法，我们还要他来干啥？</li></ul><p>（4）确定性：</p><ul><li>算法的每一个步骤都具有确定的含义，不会出现二义性。</li><li>算法在一定条件下，只有一条执行路径，相同的输入只能有唯一的输出结果。</li></ul><p>（5）可行性：</p><ul><li>算法的每一步都必须是可行的，也就是说，每一步都能够通过执行有限次数完成。</li></ul><p>5、虽然算法并不是唯一的，但是我们还是要掌握一些厉害算法，这样我们在处理某些复杂问题时才能游刃有余。正所谓吃一份饭干一份活，不要吃10份饭干一份活。</p><p>6、既然说到厉害算法那么什么才是厉害算法，一般具有一下特性</p><p>（1）正确性：</p><ul><li>算法法的正确性是指算法至少应该具有输入、输出和加工处理无歧义性、能正确反映问题的需求、能够得到问题的正确答案。</li><li>大体分为以下四个层次：<blockquote><ul><li>算法程序没有语法错误。</li><li>算法程序对于合法输入能够产生满足要求的输出。</li><li>算法程序对于非法输入能够产生满足规格的说明。</li><li>算法程序对于故意刁难的测试输入都有满足要求的输出结果。</li></ul></blockquote></li></ul><p>(2) 可读性:</p><ul><li>算法设计另一目的是为了便于阅读、理解和交流。</li><li>我们写代码的目的，一方面是为了让计算机执行，但还有一个重要的目的是为了便于他人阅读和自己日后阅读修改。</li></ul><p>（3）健壮性：</p><ul><li>当输入数据不合法时，算法也能做出相关处理，而不是产生异常、崩溃或莫名其妙的结果。</li></ul><p>（4）时间效率高和存储量低：</p><ul><li>即用少产多</li></ul><h3 id="算法效率的度量方法"><a href="#算法效率的度量方法" class="headerlink" title="算法效率的度量方法"></a>算法效率的度量方法</h3><p>1、前文提到过，算法要尽量提高效率，这里的效率一般指算法的执行时间。</p><p>2、执行时间并不是真的要看程序的执行时间，因为外在的因素会影响到计算机的运行速度，因此一般通过复杂度来抽象表示。</p><p>3、复杂度分为时间复杂度和空间复杂度</p><p>4、时间复杂度可以理解为程序的执行次数</p><p>5、一般用大写O()来体现算法时间复杂度。</p><p>6、比如上面的两个例子的复杂度就是O(1)，O(n)</p><p>7、举个例子：</p><table><thead><tr><th>例子</th><th>时间复杂度</th><th>术语</th></tr></thead><tbody><tr><td>2342342</td><td>O(1)</td><td>常数阶</td></tr><tr><td>3n+4</td><td>O(n)</td><td>线性阶</td></tr><tr><td>3n^2+4n+5</td><td>O(n^2)</td><td>平方阶</td></tr><tr><td>3log(2)n+4</td><td>O(logn)</td><td>对数阶</td></tr><tr><td>2n+3nlog(2)n+14</td><td>O(nlogn)</td><td>nlogn阶</td></tr><tr><td>n^3+2n^2+4n+6</td><td>O(n^3)</td><td>立方阶</td></tr><tr><td>2^n</td><td>O(2^n)</td><td>指数阶</td></tr></tbody></table><p>8、常用的时间复杂度所耗费的时间从小到大依次是：O(1) &lt; O(logn) &lt; (n) &lt; O(nlogn) &lt; O(n^2) &lt; O(n^3) &lt; O(2^n) &lt; O(n!) &lt; O(n^n)</p><p>9、我们在写代码时，完全可以用空间来换去时间。</p><p>举个例子，要计算某年是不是闰年，第一种方法是通过计算获得，第二种方法是建一个有2050个元素的数组。虽然第二种方法不需要计算，通过索引即可获取结果，但却在空间上花费不小。</p><p>10、通常我们所说的复杂度指的也是时间复杂度。</p><h3 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h3><p>1、线性表（List）：由零个或多个数据元素组成的有限序列。</p><ul><li><p>首先它是一个序列，也就是说元素之间是有个先来后到的。</p></li><li><p>若元素存在多个，则第一个元素无前驱，而最后一个元素无后继，其他元素都有且只有一个前驱和后继。</p></li><li><p>另外，线性表强调是有限的。</p></li></ul><p>2、如果用数学语言来进行定义，可如下：</p><ul><li><p>若将线性表记为（a1,…,ai-1,ai,ai+1,…an）,则表中ai-1领先于ai,ai领先于ai+1,称ai-1是ai的直接前驱元素,ai+1是ai的直接后继元素。</p></li><li><p>所以线性表元素的个数n(n&gt;=0)定义为线性表的长度，当n=0时，称为空表。</p></li></ul><p>3、我们可以想象，线性表有两种物理存储结构：顺序存储结构和链式存储结构。</p><p>4、线性表的顺序存储结构，指的是用一段地址连续的存储单元依次存储线性表的数据元素。</p><ul><li><p>有点类似数组，即可以通过下标直接获取到我们想要找的的元素。</p></li><li><p>线性表的顺序存储结构查找操作的复杂度为O(1)，但是删除，插入的复杂度为O(n)</p></li><li><p>优点：</p></li></ul><blockquote><ul><li>无须为表示表中元素之间的逻辑关系而增加额外的存储空间。</li><li>可以快速地存取表中任意位置的元素。</li></ul></blockquote><ul><li>缺点：</li></ul><blockquote><ul><li>插入和删除操作需要移动大量元素。</li><li>当线性表长度变化较大时，难以确定存储空间的容量。</li><li>容易造成存储空间的“碎片”。</li></ul></blockquote><p>5、线性表的链式存储结构的特点是用一组任意的存储单元存储线性表的数据元素，这组存储单元可以存在内存中未被占用的任意位置。</p><ul><li>相比顺序存储结构，需要额外存储一个指针信息。来指示其后继元素的位置。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line">function LinkedList() &#123;</span><br><span class="line">    function Node(ele) &#123;</span><br><span class="line">        this.ele &#x3D; ele;</span><br><span class="line">        this.next &#x3D; null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    let length &#x3D; 0;              &#x2F;&#x2F; 计数器变量</span><br><span class="line">    let head &#x3D; new Node(&#39;head&#39;); &#x2F;&#x2F; 头节点</span><br><span class="line">    let popEle;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;向尾部追加元素</span><br><span class="line">    this.append &#x3D; function (ele) &#123;</span><br><span class="line">        let node &#x3D; new Node(ele),</span><br><span class="line">            temp; &#x2F;&#x2F;临时指针</span><br><span class="line"></span><br><span class="line">        temp &#x3D; head;</span><br><span class="line">        while (temp.next) &#123;</span><br><span class="line">          temp &#x3D; temp.next</span><br><span class="line">        &#125;</span><br><span class="line">        temp.next &#x3D; node;</span><br><span class="line">        length++;</span><br><span class="line">        popEle &#x3D; node;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    this.getPopEle &#x3D; function() &#123;</span><br><span class="line">      return popEle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;插入到指定位置</span><br><span class="line">    this.insert &#x3D; function (position, ele) &#123;</span><br><span class="line">        if (position &gt;&#x3D; 0 &amp;&amp; position &lt; length) &#123;</span><br><span class="line">            let node &#x3D; new Node(ele),</span><br><span class="line">                temp &#x3D; head,</span><br><span class="line">                index &#x3D; 0,</span><br><span class="line">                previous;</span><br><span class="line"></span><br><span class="line">            if (position &#x3D;&#x3D; 0) &#123;</span><br><span class="line">                node.next &#x3D; temp;</span><br><span class="line">                head &#x3D; node;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                while (index++ &lt; position) &#123;</span><br><span class="line">                    previous &#x3D; temp;</span><br><span class="line">                    temp &#x3D; temp.next;</span><br><span class="line">                &#125;</span><br><span class="line">                node.next &#x3D; temp;</span><br><span class="line">                previous.next &#x3D; node;</span><br><span class="line">            &#125;</span><br><span class="line">            length++;</span><br><span class="line">            return true;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;删除指定位置元素</span><br><span class="line">    this.removeAt &#x3D; function (position) &#123;</span><br><span class="line">        if (position &gt; -1 &amp;&amp; position &lt; length) &#123;</span><br><span class="line">            let temp &#x3D; head,</span><br><span class="line">                previous,</span><br><span class="line">                index &#x3D; 0;</span><br><span class="line"></span><br><span class="line">            if (position &#x3D;&#x3D; 0) &#123;</span><br><span class="line">                head &#x3D; head.next;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                while (index++ &lt; position) &#123;</span><br><span class="line">                    previous &#x3D; temp;</span><br><span class="line">                    temp &#x3D; temp.next;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                previous.next &#x3D; temp.next;</span><br><span class="line">            &#125;</span><br><span class="line">            length--;</span><br><span class="line">            return temp.ele;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;删除所有值为ele的元素</span><br><span class="line">    this.removeEle &#x3D; function (ele) &#123;</span><br><span class="line">        let temp &#x3D; head,</span><br><span class="line">            previous,</span><br><span class="line">            num &#x3D; 0;</span><br><span class="line">        if (ele &#x3D;&#x3D; temp.ele) &#123;</span><br><span class="line">            head &#x3D; head.next;</span><br><span class="line">            length--;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        while (temp.next) &#123;</span><br><span class="line">            previous &#x3D; temp;</span><br><span class="line">            temp &#x3D; temp.next;</span><br><span class="line">            if (temp.ele &#x3D;&#x3D; ele) &#123;</span><br><span class="line">                previous.next &#x3D; temp.next;</span><br><span class="line">                length--;</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;删除最后一个元素</span><br><span class="line">    this.pop &#x3D; function () &#123;</span><br><span class="line">        let temp &#x3D; head,</span><br><span class="line">            previous &#x3D; temp;</span><br><span class="line">        if (length &lt; 1) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        if (length &#x3D;&#x3D; 1) &#123;</span><br><span class="line">            head &#x3D; new node(&#39;head&#39;);</span><br><span class="line">            length &#x3D; 0;</span><br><span class="line">            return temp.ele;</span><br><span class="line">        &#125;</span><br><span class="line">        while (temp.next) &#123;</span><br><span class="line">            previous &#x3D; temp;</span><br><span class="line">            temp &#x3D; temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        previous.next &#x3D; null;</span><br><span class="line">        length--;</span><br><span class="line">        return temp.ele;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    this.indexOf &#x3D; function (ele) &#123;</span><br><span class="line">        let temp &#x3D; head,</span><br><span class="line">            index &#x3D; 0;</span><br><span class="line"></span><br><span class="line">        while (temp) &#123;</span><br><span class="line">            if (temp.ele &#x3D;&#x3D; ele) &#123;</span><br><span class="line">                return index;</span><br><span class="line">            &#125;</span><br><span class="line">            temp &#x3D; temp.next;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    this.toString &#x3D; function () &#123;</span><br><span class="line">        let temp &#x3D; head,</span><br><span class="line">            string &#x3D; &#39;&#39;;</span><br><span class="line"></span><br><span class="line">        while (temp) &#123;</span><br><span class="line">            string +&#x3D; temp.ele + &#39; &#39;;</span><br><span class="line">            temp &#x3D; temp.next;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        return string;</span><br><span class="line">    &#125;</span><br><span class="line">    this.length &#x3D; function () &#123;</span><br><span class="line">        return length;</span><br><span class="line">    &#125;</span><br><span class="line">    this.isEmpty &#x3D; function () &#123;</span><br><span class="line">        return length &#x3D;&#x3D;&#x3D; 0;</span><br><span class="line">    &#125;;</span><br><span class="line">    this.getHead &#x3D; function () &#123;</span><br><span class="line">        return head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let mylist &#x3D; new LinkedList();</span><br><span class="line">mylist.append(&#39;A&#39;);</span><br><span class="line">mylist.append(&#39;B&#39;);</span><br><span class="line">mylist.append(&#39;C&#39;);</span><br><span class="line">mylist.append(&#39;D&#39;);</span><br><span class="line">mylist.append(&#39;C&#39;);</span><br><span class="line">mylist.append(&#39;B&#39;);</span><br><span class="line">mylist.append(&#39;A&#39;);</span><br><span class="line">console.log(mylist.toString());</span><br><span class="line">console.log(mylist.pop());</span><br><span class="line">console.log(mylist.toString());</span><br><span class="line">console.log(&#39;移除%d个C&#39;, mylist.removeEle(&#39;C&#39;));</span><br><span class="line">console.log(mylist.toString());</span><br><span class="line">console.log(mylist.length());</span><br><span class="line">console.log(mylist.getHead());</span><br><span class="line"></span><br><span class="line">console.log(mylist.indexOf(&#39;C&#39;))</span><br></pre></td></tr></table></figure><p>6、效率PK：</p><ul><li><p>我们最后的环节是效率PK，我们发现无论是单链表插入还是删除算法，它们其实都是由两个部分组成：第一部分就是遍历查找第i个元素，第二部分就是实现插入和删除元素。</p></li><li><p>从整个算法来说，我们很容易可以推出它们的时间复杂度都是O(n)。</p></li><li><p>再详细点分析：如果在我们不知道第i个元素的指针位置，单链表数据结构在插入和删除操作上，与线性表的顺序存储结构是没有太大优势的。</p></li><li><p>但如果，我们希望从第i个位置开始，插入连续10个元素，对于顺序存储结构意味着，每一次插入都需要移动n-i个位置，所以每次都是O(n)。</p></li><li><p>而单链表，我们只需要在第一次时，找到第i个位置的指针，此时为O(n)，接下来只是简单地通过赋值移动指针而已，时间复杂度都是O(1)。</p></li><li><p>显然，对于插入或删除数据越频繁的操作，单链表的效率优势就越是明显</p></li></ul><h3 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h3><p>1、用数组描述的链表叫做静态链表，这种描述方法叫做游标实现法。</p><ul><li>意思就是在没有指针的时候，如何使用数组来模拟链表</li></ul><p>2、结构：</p><table><thead><tr><th>游标</th><th>5</th><th>2</th><th>3</th><th>4</th><th>0</th><th>6</th><th>7</th><th>···</th><th>1</th></tr></thead><tbody><tr><td>数据</td><td></td><td>A</td><td>B</td><td>C</td><td>D</td><td></td><td></td><td></td><td></td></tr><tr><td>下标</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>···</td><td>999</td></tr></tbody></table><p>3、约定：</p><ul><li>我们对数组的第一个和最后一个元素做特殊处理，他们的data不存放数据。</li><li>我们通常把未使用的数组元素称为备用链表。</li><li>数组的第一个元素，即下标为0的那个元素的cur就存放备用链表的第一个结点的下标。<br>数组的最后一个元素，即下标为MAXSIZE-1的cur则存放第一个有数值的元素的下标，相当于单链表中的头结点作用。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line">function SLinkList(MAXSIZE) &#123;</span><br><span class="line">  this.MAXSIZE &#x3D; MAXSIZE || 1000;</span><br><span class="line">  for (let a &#x3D; 0; a &lt; MAXSIZE - 1; a++) &#123;</span><br><span class="line">    this[a] &#x3D; &#123;&#125;;</span><br><span class="line">    this[a].cur &#x3D; a + 1;</span><br><span class="line">  &#125;</span><br><span class="line">  this[MAXSIZE - 1] &#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SLinkList.prototype &#x3D; &#123;</span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 在静态单链线性表插入数据</span><br><span class="line">   * @param data</span><br><span class="line">   *&#x2F;</span><br><span class="line">  push: function(data) &#123;</span><br><span class="line">    if (this[0].cur &gt;&#x3D; this.MAXSIZE - 1) &#123;</span><br><span class="line">      retur false;</span><br><span class="line">    &#125;</span><br><span class="line">    const firstStaticListFirstEle &#x3D; this[0].cur;</span><br><span class="line">    const nextIdleSpaceCursor &#x3D; this[firstStaticListFirstEle].cur;</span><br><span class="line">    this[firstStaticListFirstEle] &#x3D; &#123;</span><br><span class="line">      data,</span><br><span class="line">      cur: 0,</span><br><span class="line">    &#125;;</span><br><span class="line">    this[0].cur &#x3D; nextSpaceCursor;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 在静态单链线性表L中查找第1个值为e的元素，</span><br><span class="line">   * 若找到，则返回它在L中的位序</span><br><span class="line">   * @param data</span><br><span class="line">   *&#x2F;</span><br><span class="line">  locateElem: function (data) &#123;</span><br><span class="line">    var i &#x3D; this[this.MAXSIZE - 1].cur;</span><br><span class="line">    while (i &amp;&amp; this[i].data !&#x3D;&#x3D; data) &#123;</span><br><span class="line">      i &#x3D; this[i].cur;</span><br><span class="line">    &#125;</span><br><span class="line">    return i;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 将一维数组中各分量链成一个备用链表</span><br><span class="line">   * this[0].cur为头指针</span><br><span class="line">   *&#x2F;</span><br><span class="line">  initSpace: function () &#123;</span><br><span class="line">    for (var i &#x3D; 0; i &lt; this.MAXSIZE - 1; ++i) &#123;</span><br><span class="line">      this[i] &#x3D; this[i] || &#123;&#125;;</span><br><span class="line">      this[i].cur &#x3D; i + 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    this[this.MAXSIZE - 1] &#x3D; this[this.MAXSIZE - 1] || &#123;&#125;;</span><br><span class="line">    this[this.MAXSIZE - 1].cur &#x3D; 1;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 若备用链表非空，则返回分配的结点下标，反则返回0</span><br><span class="line">   * @returns &#123;*&#125;</span><br><span class="line">   *&#x2F;</span><br><span class="line">  malloc: function () &#123;</span><br><span class="line">    var i &#x3D; this[0].cur;</span><br><span class="line">    if (this[0].cur) this[0].cur &#x3D; this[i].cur;</span><br><span class="line">    return i;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 将下标为k的空闲结点回收到备用链表</span><br><span class="line">   * @param k</span><br><span class="line">   *&#x2F;</span><br><span class="line">  free: function (k) &#123;</span><br><span class="line">    this[k].cur &#x3D; this[0].cur;</span><br><span class="line">    this[0].cur &#x3D; k;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 在一维数组中建立表示集合(A-B)U(B-A)</span><br><span class="line">   * 的静态链表，s为其头指针。</span><br><span class="line">   * @returns &#123;*&#125;</span><br><span class="line">   *&#x2F;</span><br><span class="line">  difference: function (arr1, arr2) &#123;</span><br><span class="line">    &#x2F;&#x2F; 初始化备用空间</span><br><span class="line">    this.initSpace();</span><br><span class="line">    &#x2F;&#x2F; 生成s的头结点</span><br><span class="line">    var s &#x3D; this.malloc();</span><br><span class="line">    &#x2F;&#x2F; r指向s的当前最后结点</span><br><span class="line">    var r &#x3D; s;</span><br><span class="line">    &#x2F;&#x2F; 删除A和B的元素个数</span><br><span class="line">    var m &#x3D; arr1.length;</span><br><span class="line">    var n &#x3D; arr2.length;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 建立集合A的链表</span><br><span class="line">    for (var j &#x3D; 0; j &lt; m; ++j) &#123;</span><br><span class="line">      &#x2F;&#x2F;分配结点</span><br><span class="line">      var i &#x3D; this.malloc();</span><br><span class="line">      &#x2F;&#x2F; 输入A元素的值</span><br><span class="line">      this[i].data &#x3D; arr1[j];</span><br><span class="line">      &#x2F;&#x2F; 插入到表尾</span><br><span class="line">      this[r].cur &#x3D; i;</span><br><span class="line">      r &#x3D; i;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 尾结点的指针为空</span><br><span class="line">    this[r].cur &#x3D; 0;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 依次输入B的元素，若不在当前表中，则插入，</span><br><span class="line">    &#x2F;&#x2F; 否则删除</span><br><span class="line">    for (j &#x3D; 0; j &lt; n; ++j) &#123;</span><br><span class="line">      var b &#x3D; arr2[j];</span><br><span class="line">      var p &#x3D; s;</span><br><span class="line">      &#x2F;&#x2F; k指向集合中的第一个结点</span><br><span class="line">      var k &#x3D; this[s].cur;</span><br><span class="line">      &#x2F;&#x2F; 在当前表中查找</span><br><span class="line">      while (k !&#x3D;&#x3D; this[r].cur &amp;&amp; this[k].data !&#x3D;&#x3D; b) &#123;</span><br><span class="line">        p &#x3D; k;</span><br><span class="line">        k &#x3D; this[k].cur;</span><br><span class="line">      &#125;</span><br><span class="line">      &#x2F;&#x2F; 当前表中不存在该元素，插入在r所指结点之后，且r的位置不变</span><br><span class="line">      if (k &#x3D;&#x3D;&#x3D; this[r].cur) &#123;</span><br><span class="line">        i &#x3D; this.malloc();</span><br><span class="line">        this[i].data &#x3D; b;</span><br><span class="line">        this[i].cur &#x3D; this[r].cur;</span><br><span class="line">        this[r].cur &#x3D; i;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 该元素已在表中，删除之</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        this[p].cur &#x3D; this[k].cur;</span><br><span class="line">        this.free(k);</span><br><span class="line">        &#x2F;&#x2F; 若删除的是r所指结点，则需修改尾指针</span><br><span class="line">        if (r &#x3D;&#x3D;&#x3D; k) r &#x3D; p;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var sl &#x3D; new SLinkList(1, 0, 10);</span><br><span class="line">var ret &#x3D; sl.difference([1, 2, 3], [3, 4, 5]);</span><br><span class="line">console.log(sl);</span><br></pre></td></tr></table></figure><h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><p>1、对于单链表，由于每个结点只存储了向后的指针，到了尾部标识就停止了向后链的操作。也就是说，按照这样的方式，只能索引后继结点不能索引前驱结点。</p><p>2、将单链表中终端结点的指针端由空指针改为指向头结点，就使整个单链表形成一个环，这种头尾相接的单链表就成为了单循环链表，简称循环链表。</p><p>3、循环链表的应用1，约瑟夫问题：</p><p>4、据说著名犹太历史学家 Josephus有过以下的故事：在罗马人占领乔塔帕特后，39个犹太人与Josephus及他的朋友躲到一个洞中，39个犹太人决定宁愿死也不要被敌人抓到，于是决定了一个自杀方式，41个人排成一个圆圈，由第1个人开始报数，每报数到第3人该人就必须自杀，然后再由下一个重新报数，直到所有人都自杀身亡为止。<br>然而Josephus和他的朋友并不想遵从，Josephus要他的朋友先假装遵从，他将朋友与自己安排在第16个与第31个位置，于是逃过了这场死亡游戏。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">const sList &#x3D; new LinkedList();</span><br><span class="line"></span><br><span class="line">for (let a &#x3D; 1; a &lt; 42; a++) &#123;</span><br><span class="line">  sList.append(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sList.getPopEle().next &#x3D; sList.getHead().next;</span><br><span class="line"></span><br><span class="line">let temp &#x3D; sList.getHead().next;</span><br><span class="line"></span><br><span class="line">while(temp.next !&#x3D; temp) &#123;</span><br><span class="line">  console.log(temp.next.next.ele);</span><br><span class="line">  temp.next.next &#x3D; temp.next.next.next;</span><br><span class="line">  temp &#x3D; temp.next.next;</span><br><span class="line">&#125;</span><br><span class="line">console.log(temp.ele);</span><br></pre></td></tr></table></figure><p>5、问题：如何判断一个单链表中存在环</p><ul><li>方法一：使用p、q两个指针，p总是向前走，但q每次都从头开始走，对于每个节点，看p走的步数是否和q一样。如图，当p从6走到3时，用了6步，此时若q从head出发，则只需两步就到3，因而步数不等，出现矛盾，存在环。</li><li>方法二：使用p、q两个指针，p每次向前走一步，q每次向前走两步，若在某个时候p == q，则存在环。</li></ul><h3 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h3><p>1、双向链表相对单链表多了一个前向指针，指向当前节点的前驱节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line">function DoublyLinkedList() &#123;</span><br><span class="line">    var Node &#x3D; function (element) &#123;</span><br><span class="line">        this.element &#x3D; element; </span><br><span class="line">        this.prev &#x3D; null; </span><br><span class="line">        this.next &#x3D; null; </span><br><span class="line">    &#125;; </span><br><span class="line"></span><br><span class="line">    var length &#x3D; 0, </span><br><span class="line">        head &#x3D; null; </span><br><span class="line">    &#x2F;&#x2F;向尾部追加</span><br><span class="line">    this.append &#x3D; function (element) &#123;</span><br><span class="line">        var node &#x3D; new Node(element), </span><br><span class="line">            current, </span><br><span class="line">            previous; </span><br><span class="line"></span><br><span class="line">        if ( ! head) &#123;</span><br><span class="line">            head &#x3D; node; </span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            current &#x3D; head; </span><br><span class="line">            while (current) &#123;</span><br><span class="line">                previous &#x3D; current; </span><br><span class="line">                current &#x3D; current.next; </span><br><span class="line">            &#125;</span><br><span class="line">            previous.next &#x3D; node</span><br><span class="line">            node.prev &#x3D; previous</span><br><span class="line">        &#125;</span><br><span class="line">        length ++ ; </span><br><span class="line">        return true; </span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;指定位置插入</span><br><span class="line">    this.insert &#x3D; function (position, element) &#123;</span><br><span class="line">        if (position &gt; -1 &amp;&amp; position &lt;&#x3D; length) &#123;</span><br><span class="line">            var node &#x3D; new Node(element), </span><br><span class="line">                current &#x3D; head, </span><br><span class="line">                previous, </span><br><span class="line">                index &#x3D; 0; </span><br><span class="line">            if (position &#x3D;&#x3D;&#x3D; 0) &#123;</span><br><span class="line">                if ( ! head) &#123;</span><br><span class="line">                    head &#x3D; node; </span><br><span class="line">                &#125;else &#123;</span><br><span class="line">                    node.next &#x3D; head; </span><br><span class="line">                    head.prev &#x3D; node; </span><br><span class="line">                    head &#x3D; node; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                while (index ++  &lt; position) &#123;</span><br><span class="line">                    previous &#x3D; current; </span><br><span class="line">                    current &#x3D; current.next; </span><br><span class="line">                &#125;</span><br><span class="line">                if (position !&#x3D; length) &#123;</span><br><span class="line">                    node.next &#x3D; current; </span><br><span class="line">                    current.prev &#x3D; node; </span><br><span class="line">                &#125;</span><br><span class="line">                previous.next &#x3D; node; </span><br><span class="line">                node.prev &#x3D; previous; </span><br><span class="line">            &#125;</span><br><span class="line">            length ++ ; </span><br><span class="line">            return true; </span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            return false; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;; </span><br><span class="line">    &#x2F;&#x2F;删除指定位置元素</span><br><span class="line">    this.removeAt &#x3D; function (position) &#123;</span><br><span class="line">        if (position &gt; -1 &amp;&amp; position &lt; length) &#123;</span><br><span class="line">            var current &#x3D; head, </span><br><span class="line">                index &#x3D; 0, </span><br><span class="line">                previous; </span><br><span class="line">            if (position &#x3D;&#x3D;&#x3D; 0) &#123;</span><br><span class="line">                head &#x3D; head.next; </span><br><span class="line">                head.prev &#x3D; null;</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                while (index ++  &lt; position) &#123;</span><br><span class="line">                    previous &#x3D; current; </span><br><span class="line">                    current &#x3D; current.next; </span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if(position &#x3D;&#x3D;&#x3D; length - 1)&#123;</span><br><span class="line">                    previous.next &#x3D;null;</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    previous.next &#x3D; current.next; </span><br><span class="line">                    current.next.prev &#x3D; previous; </span><br><span class="line">                &#125;              </span><br><span class="line">            &#125;; </span><br><span class="line">            length--; </span><br><span class="line">            return current.element; </span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            return false; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;; </span><br><span class="line">    &#x2F;&#x2F;删除值为element的所有元素</span><br><span class="line">    this.removeEle &#x3D; function (element) &#123;</span><br><span class="line">        var current &#x3D; head, </span><br><span class="line">            previous,</span><br><span class="line">            num&#x3D;0; </span><br><span class="line">        if (current.element &#x3D;&#x3D;&#x3D; element) &#123;</span><br><span class="line">            head &#x3D; current.next; </span><br><span class="line">        &#125;</span><br><span class="line">        previous &#x3D; current; </span><br><span class="line">        current &#x3D; current.next; </span><br><span class="line"></span><br><span class="line">        while (current) &#123;</span><br><span class="line">            if (current.element &#x3D;&#x3D; element) &#123;</span><br><span class="line">                previous.next &#x3D; current.next;</span><br><span class="line">                if(current.next)&#123;</span><br><span class="line">                    current.next.prev &#x3D; previous; </span><br><span class="line">                &#125;</span><br><span class="line">                current&#x3D;current.next;</span><br><span class="line">                length--;</span><br><span class="line">                num++;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                previous &#x3D; current; </span><br><span class="line">                current &#x3D; current.next; </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        return num; </span><br><span class="line">    &#125;; </span><br><span class="line">    &#x2F;&#x2F;删除尾部</span><br><span class="line">    this.remove &#x3D; function () &#123;</span><br><span class="line">        if (length &#x3D;&#x3D;&#x3D; 0) &#123;</span><br><span class="line">            return false; </span><br><span class="line">        &#125;; </span><br><span class="line"></span><br><span class="line">        var current &#x3D; head, </span><br><span class="line">            previous; </span><br><span class="line"></span><br><span class="line">        if (length &#x3D;&#x3D;&#x3D; 1) &#123;</span><br><span class="line">            head &#x3D; null; </span><br><span class="line">            length--; </span><br><span class="line">            return current.element; </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        while (current.next) &#123;</span><br><span class="line">            previous &#x3D; current; </span><br><span class="line">            current &#x3D; current.next; </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        previous.next &#x3D; null; </span><br><span class="line">        length--; </span><br><span class="line">        return current.element; </span><br><span class="line">    &#125;; </span><br><span class="line">    &#x2F;&#x2F;当前元素的其实位置</span><br><span class="line">    this.indexOf &#x3D; function (element) &#123;</span><br><span class="line">        var current &#x3D; head, </span><br><span class="line">            index &#x3D; 0; </span><br><span class="line"></span><br><span class="line">        while (current &amp;&amp; index &lt; length) &#123;</span><br><span class="line">            if (current.element &#x3D;&#x3D;&#x3D; element) &#123;</span><br><span class="line">                return index; </span><br><span class="line">            &#125;; </span><br><span class="line">            current &#x3D; current.next;</span><br><span class="line">            index++; </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return false; </span><br><span class="line">    &#125;; </span><br><span class="line">    &#x2F;&#x2F;是否为空</span><br><span class="line">    this.isEmpty &#x3D; function () &#123;</span><br><span class="line">        return length &#x3D;&#x3D;&#x3D; 0; </span><br><span class="line">    &#125;; </span><br><span class="line">    &#x2F;&#x2F;链表长度</span><br><span class="line">    this.size &#x3D; function () &#123;</span><br><span class="line">        return length; </span><br><span class="line">    &#125;; </span><br><span class="line">    &#x2F;&#x2F;转成字符串</span><br><span class="line">    this.toString &#x3D; function () &#123;</span><br><span class="line">        var current &#x3D; head, </span><br><span class="line">            string &#x3D; &#39;&#39;; </span><br><span class="line"></span><br><span class="line">        while (current) &#123;</span><br><span class="line">            string +&#x3D; current.element; </span><br><span class="line">            current &#x3D; current.next; </span><br><span class="line">        &#125;</span><br><span class="line">        return string; </span><br><span class="line">    &#125;; </span><br><span class="line">    &#x2F;&#x2F;获取头结点元素</span><br><span class="line">    this.getHead &#x3D; function () &#123;</span><br><span class="line">        return head.element; </span><br><span class="line">    &#125;; </span><br><span class="line">    &#x2F;&#x2F;获取未结点元素</span><br><span class="line">    this.getTail &#x3D; function () &#123;</span><br><span class="line">        var previous,current&#x3D;head;</span><br><span class="line">        while(current)&#123;</span><br><span class="line">            previous&#x3D;current;</span><br><span class="line">            current&#x3D;current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        return previous.element; </span><br><span class="line">    &#125;; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let myLink &#x3D; new DoublyLinkedList(); </span><br><span class="line">myLink.append(&#39;A&#39;)</span><br><span class="line">myLink.append(&#39;B&#39;)</span><br><span class="line">myLink.append(&#39;C&#39;)</span><br><span class="line">myLink.append(&#39;E&#39;)</span><br><span class="line">myLink.insert(3, &#39;D&#39;)</span><br><span class="line">myLink.insert(5, &#39;F&#39;)</span><br><span class="line">myLink.insert(0, &#39;G&#39;)</span><br><span class="line">console.log(myLink.toString()) &#x2F;&#x2F;GABCDEF</span><br><span class="line">myLink.removeAt(0) &#x2F;&#x2F;删除G</span><br><span class="line">myLink.removeAt(5) &#x2F;&#x2F;删除F</span><br><span class="line">console.log(myLink.remove()) &#x2F;&#x2F;删除E</span><br><span class="line">console.log(myLink.toString()) &#x2F;&#x2F; ABCD</span><br><span class="line">myLink.append(&#39;D&#39;) &#x2F;&#x2F;向尾部增加D</span><br><span class="line">console.log(myLink.toString()) &#x2F;&#x2F;ABCDD</span><br><span class="line">console.log(myLink.removeEle(&#39;D&#39;)) &#x2F;&#x2F;删除所有D,打印删除D的个数 2</span><br><span class="line">console.log(myLink.toString()) &#x2F;&#x2F;ABC</span><br><span class="line">console.log(myLink.indexOf(&#39;B&#39;)) &#x2F;&#x2F;打印B的位置 1</span><br><span class="line">console.log(myLink.size()) &#x2F;&#x2F;打印链表的长度 3</span><br><span class="line">console.log(myLink.getHead()) &#x2F;&#x2F;A</span><br><span class="line">console.log(myLink.getTail()) &#x2F;&#x2F;C</span><br></pre></td></tr></table></figure><p>2、最后总结一下，双向链表相对于单链表来说，是要更复杂一点，每个结点多了一个prior指针，对于插入和删除操作的顺序大家要格外小心。</p><p>3、不过，双向链表可以有效提高算法的时间性能，说白了就是用空间来换取时间。</p><h3 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h3><p>1、栈是一种重要的线性结构，可以这样讲，栈是前面讲过的线性表的一种具体形式。</p><p>2、生活中有很多例子跟栈的特性非常相似，例如子弹的入膛和发射，编码和撤销，网站的前进和后退等等</p><p>3、官方定义：栈（Stack）是一个后进先出（Last in first out,LIFO）的线性表，它要求只在表尾进行删除和插入操作。</p><p>4、通俗来讲所谓的栈，其实也就是一个特殊的线性表（顺序表、链表），但是它在操作上有一些特殊的要求和限制：</p><ul><li>栈的元素必须“后进先出”。</li><li>栈的操作只能在这个线性表的表尾进行。</li><li>注：对于栈来说，这个表尾称为栈的栈顶（top），相应的表头称为栈底（bottom）。</li></ul><p>5、栈的插入操作（Push），叫做进栈，也称为压栈，入栈。类似子弹放入弹夹的动作。</p><p>6、栈的删除操作（Pop），叫做出栈，也称为弹栈。如同弹夹中的子弹出夹。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">function Stack()&#123;</span><br><span class="line">    this.dataStore &#x3D; [];</span><br><span class="line">    this.top &#x3D; 0;</span><br><span class="line">    this.push &#x3D; push;</span><br><span class="line">    this.pop &#x3D; pop;</span><br><span class="line">    this.peek &#x3D; peek;</span><br><span class="line">    this.clear &#x3D; clear;</span><br><span class="line">    this.length &#x3D; length;</span><br><span class="line">    this.printElement &#x3D; printStack;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;注意++操作符的位置，它放在this.top的后面，这样新入栈的元素就被放在top的当前位置对应的位置，同时top自加1，指向下一个位置</span><br><span class="line">    function push(element)&#123;</span><br><span class="line">        this.dataStore[this.top++] &#x3D; element;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;返回栈顶元素，同时top的位置减1</span><br><span class="line">    function pop()&#123;</span><br><span class="line">        return this.dataStore[--this.top];</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;peek()方法返回数组的第top-1个位置的元素，即栈顶元素</span><br><span class="line">    function peek()&#123;</span><br><span class="line">        return this.dataStore[this.top-1];</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;将top的值设置0，即清空一个栈</span><br><span class="line">    function clear()&#123;</span><br><span class="line">        this.top &#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;返回变量top的值即为栈内元素的个数</span><br><span class="line">    function length()&#123;</span><br><span class="line">        return this.top;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;输出栈内元素</span><br><span class="line">    function printStack()&#123;</span><br><span class="line">        while (this.top&gt;0)&#123;</span><br><span class="line">            console.log(this.pop()+&quot;&amp;nbsp;&amp;nbsp;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7、栈的实践：计算 (1-2)*(4+5)</p><ul><li>我们数值加减乘除和括号的优先级，但是要用计算机实现就需要很多if判断</li><li>于是乎，一个波兰逻辑学家，发明了一种后缀表达式，上面的式子用后缀表达式来表示的话应该是这样1 2 – 4 5 + * </li><li>这样的例子对于计算机来说是处理起来是非常的方便，用栈的特性可以很轻松的获取结果</li><li>我们先将1 2入栈，然后碰到-号计算结果入栈然后将4 5入栈碰到+号计算结果入栈最后碰到*号计算结果出栈，得出结果为-9</li></ul><table><thead><tr><th></th></tr></thead><tbody><tr><td></td></tr><tr><td></td></tr><tr><td></td></tr><tr><td>2</td></tr><tr><td>1</td></tr></tbody></table><table><thead><tr><th></th></tr></thead><tbody><tr><td></td></tr><tr><td></td></tr><tr><td>5</td></tr><tr><td>4</td></tr><tr><td>-1</td></tr></tbody></table><table><thead><tr><th></th></tr></thead><tbody><tr><td></td></tr><tr><td></td></tr><tr><td></td></tr><tr><td>9</td></tr><tr><td>-1</td></tr></tbody></table><p>8、如和将中缀表达式转化为后缀表达式呢，例如1+(2-3)*4+10/5如何用后缀表达式表示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">function suffixExpression(stri)&#123;</span><br><span class="line">    var str &#x3D; stri;</span><br><span class="line">    var stack &#x3D; new Stack();</span><br><span class="line">    var outStack &#x3D; new Array();</span><br><span class="line">    for (var i &#x3D; 0; i &lt; str.length; ++i) &#123;</span><br><span class="line">        if (&#39;)&#39; &#x3D;&#x3D; str[i]) &#123;</span><br><span class="line">            while (true) &#123;</span><br><span class="line">                var top &#x3D; stack.peek();</span><br><span class="line">                stack.pop();</span><br><span class="line">                if(&#39;(&#39; !&#x3D; top) &#123;</span><br><span class="line">                    outStack.push(top);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if ([&#39;-&#39;,&#39;+&#39;].indexOf(str[i]) &gt;- 1) &#123;</span><br><span class="line">            if ([&#39;*&#39;,&#39;&#x2F;&#39;].indexOf(stack.peek()) &gt; -1) &#123;</span><br><span class="line">                while ([&#39;*&#39;,&#39;&#x2F;&#39;].indexOf(stack.peek()) &gt; -1) &#123;</span><br><span class="line">                    outStack.push(stack.peek());</span><br><span class="line">                    stack.pop();</span><br><span class="line">                &#125;</span><br><span class="line">                outStack.push(str[i]);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                stack.push(str[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if([&#39;(&#39;,&#39;*&#39;,&#39;&#x2F;&#39;].indexOf(str[i]) &gt; -1) &#123;</span><br><span class="line">            stack.push(str[i]);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            outStack.push(str[i]);</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    while(stack.top) &#123;</span><br><span class="line">        outStack.push(stack.pop());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    console.log(outStack);</span><br><span class="line">&#125;</span><br><span class="line">suffixExpression(&#39;a+b*c+(d*e+f)*g&#39;);</span><br></pre></td></tr></table></figure><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>1、队列（queue）是只允许在一端进行插入操作，而在另一端进行删除操作的线性表。</p><p>1、与栈相反，队列是一种先进先出（First In First Out, FIFO）的线性表。</p><h3 id="递归与分治思想"><a href="#递归与分治思想" class="headerlink" title="递归与分治思想"></a>递归与分治思想</h3><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>1、斐波那契数列的递归实现</p><table><thead><tr><th>1</th><th>1</th><th>2</th><th>3</th><th>5</th><th>8</th><th>13</th></tr></thead></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const rtc &#x3D; [];</span><br><span class="line">function abc(a &#x3D; 0, b &#x3D; 1) &#123;</span><br><span class="line">    if (rtc.length &lt; 12) &#123;</span><br><span class="line">        rtc.push(a + b);</span><br><span class="line">        abc(b, a + b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(rtc);</span><br></pre></td></tr></table></figure><p>2、我们把一个直接调用自己或通过一系列的调用语句间接地调用自己的函数，称作递归函数。</p><p>3、写递归程序最怕的就是陷入永不结束的无穷递归中。切记，每个递归定义必须至少有一个条件，当满足这个条件时递归不再进行，即函数不再调用自身而是返回值。</p><p>4、使用递归能使程序的结构更清晰、更简洁、更容易让人理解，从而减少读懂代码的时间。</p><p>5、例如用迭代的方法获取斐波那契数列就不容易理解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">const rtc &#x3D; [];</span><br><span class="line">function F(n) &#123;</span><br><span class="line">    if (n &#x3D;&#x3D; 0) &#123;</span><br><span class="line">        return 0;    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (n &#x3D;&#x3D; 1) &#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (n &gt; 1) &#123;</span><br><span class="line">        return F(n - 1) + F(n - 2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (var a &#x3D; 1; a &lt;&#x3D; 12; a++) &#123;</span><br><span class="line">    rtc.push(F(a));</span><br><span class="line">&#125;</span><br><span class="line">console.log(rtc);</span><br></pre></td></tr></table></figure><h3 id="分治思想"><a href="#分治思想" class="headerlink" title="分治思想"></a>分治思想</h3><p>1、分治思想在算法设计中也是非常常见的，当一个问题规模较大且不易求解的时候，就可以考虑将问题分成几个小的模块，逐一解决。</p><p>2、分治思想和递归算是有亲兄弟的关系了，因为采用分治思想处理问题，其各个小模块通常具有与大问题相同的结构，这种特性也使递归技术有了用武之地。我们接下来通过实例来讲解。</p><p>3、汉诺塔问题</p><ul><li>问题描述：一位法国数学家曾编写过一个印度的古老传说：在世界中心贝拿勒斯的圣庙里，一块黄铜板上插着三根宝石针。印度教的主神梵天在创造世界的时候，在其中一根针上从下到上地穿好了由大到小的64片金片，这就是所谓的汉诺塔。不论白天黑夜，总有一个僧侣在按照下面的法则移动这些金片：一次只移动一片，不管在哪根针上，小片必须在大片上面。</li></ul><p>4、思路：首先需要先将最后一个盘子上面的盘子移动到空闲柱子，然后将最大得到盘子移动到目标柱，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> &#x2F;&#x2F; 递归算法</span><br><span class="line">let c &#x3D; 0;</span><br><span class="line">function move(n, x, y, z) &#123;</span><br><span class="line">    function director(x, z, n) &#123;</span><br><span class="line">        c++;</span><br><span class="line">        console.log(&#96;第$&#123;c&#125;次移动,将第$&#123;n&#125;个盘子从$&#123;x&#125;移动到$&#123;z&#125;&#96;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (n &#x3D;&#x3D; 1) &#123;</span><br><span class="line">        director(x, z, 1);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        move(n - 1, x, z, y);</span><br><span class="line">        director(x, z, n);</span><br><span class="line">        move(n - 1, y, x, z);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">move(3 &quot;x&quot;, &quot;y&quot;, &quot;z&quot;);</span><br></pre></td></tr></table></figure><p>5、小作业：八皇后问题，在8X8格的国际象棋上摆放八个皇后，使其不能互相攻击，即任意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法。</p><h3 id="BF算法"><a href="#BF算法" class="headerlink" title="BF算法"></a>BF算法</h3><p>1、BF算法属于朴素的模式匹配算法，它的核心思想是：</p><ul><li><p>有两个字符串S和T，长度为N和M。首先S[1]和T[1]比较，若相等，则再比较S[2]和T[2]，一直到T[M]为止；若S[1]和T[1]不等，则T向右移动一个字符的位置，再依次进行比较。</p></li><li><p>该算法最坏情况下要进行M*(N-M+1)次比较，时间复杂度为O(M*N)。</p></li></ul><h3 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h3><p>1、BF算法虽然很有效也很容易理解，但是效率却不高，于是乎就有了KMP算法</p><p>2、KMP算法是三位老前辈（D.E.Knuth、J.H.Morris 和 V.R.Pratt）的研究结果，大大的避免重复遍历的情况</p><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
